Given:

Execute (Execute gets wrapped in function):
# Vader comment
  " Vimscript comment
  let f = expand('<sfile>', 1)
  let m = matchlist(f, '\Vfunction \(<SNR>\d\+_vader_wrapper\)')
  Assert !empty(m), 'Wrapped in function'
  redir => func
    silent exe 'function '.m[1]
  redir END
  for l in split(func, '\n')[1:-2]
    call append(line('$'), l)
  endfor

Expect (Contents of wrapped function):

  1  " # Vader comment
  2  " Vimscript comment
  3  let f = expand('<sfile>', 1)
  4  let m = matchlist(f, '\Vfunction \(<SNR>\d\+_vader_wrapper\)')
  5  Assert !empty(m), 'Wrapped in function'
  6  redir => func
  7    silent exe 'function '.m[1]
  8  redir END
  9  for l in split(func, '\n')[1:-2]
  10   call append(line('$'), l)
  11 endfor
  12 if v:profiling | if !exists("g:vader_locals") | let g:vader_locals = [] | endif | call extend(g:vader_locals, items(l:)) | endif

Then (Thrown from line 3):
# Vader comment
  " Comment
  AssertThrows throw "testexception"
  let m = matchlist(g:vader_throwpoint, '\Vfunction <SNR>\d\+_vader_wrapper[\(\d\+\)]..vader#assert#throws, line 5')
  AssertEqual m[1], '3', 'Thrown from line 3'

Execute (Thrown from line 3):
# Vader comment
  " Comment
  AssertThrows throw "testexception"
  let m = matchlist(g:vader_throwpoint, '\Vfunction <SNR>\d\+_vader_wrapper[\(\d\+\)]..vader#assert#throws, line 5')
  AssertEqual m[1], '3', 'Thrown from line 3'

Execute (Error in scoped function cannot get source, but continues):
  let obj = {}
  function! obj.fn()
    echo doesnotexist
  endfunction
  try
    call obj.fn()
  catch
    AssertEqual v:exception, 'Vim(echo):E121: Undefined variable: doesnotexist'
  endtry
  let m = matchlist(g:vader_throwpoint, '\Vfunction <SNR>\d\+_vader_wrapper[\(\d\+\)]..vader#assert#throws, line 5')
  AssertEqual m[1], '3', 'Thrown from line 3'

Execute (TODO: Error in Execute):
  Assert 0, 'Assertion error in Execute'

Execute (Validate error in Execute):
  AssertEqual g:vader#window#_s.console_buffered[-2],
  \ printf('      > %s:59: Assert 0, ''Assertion error in Execute''', g:vader_file)

Execute (TODO: Error in Execute (via file)):
  execute 'source ' . g:vader_file

Execute (Validate error in Execute (via file)):
  let error = g:vader#window#_s.console_buffered[-2]
  Assert error =~# '\v^ +\(\d+/\d+\) \[EXECUTE\] \(X\) Error: Vim:E492: Not an editor command: Given:'
  Assert stridx(error, printf(' (in %s, line 1)', g:vader_file)) != -1

Execute (TODO: Error in Execute (via another file)):
  execute 'source ' . substitute(g:vader_file, '\.vader$', '-include.vim', '')
  call VaderTestIncludedFunction('custom error')

Execute (Validate error in Execute (via another file)):
  let tb = g:vader#window#_s.console_buffered[-4:-2]
  AssertEqual tb, [
  \ '      > in VaderTestIncludedFunction (line 1)',
  \ '      >   throw a:error',
  \ printf('      > %s:75: call VaderTestIncludedFunction(''custom error'')', g:vader_file),
  \ ]
